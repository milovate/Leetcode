class DisjointSet {
public:
    vector<int>parent, size;
    DisjointSet(int n) {
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        DisjointSet ds(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1){
                    if(ds.findUPar(i)!=ds.findUPar(j)){
                        ds.unionBySize(i,j);
                    }
                }
            }
        }
        sort(initial.begin(),initial.end());
        unordered_map<int,int>mp;
        for(int i=0;i<initial.size();i++){
            mp[ds.findUPar(initial[i])]++;
        }

        int ans=initial[0];
        int maxi=INT_MIN;
        for(int i=0;i<initial.size();i++){
            int temp=ds.findUPar(initial[i]);
            if(mp[temp]==1){
                if(maxi<ds.size[temp]){
                    ans=initial[i];
                    maxi=ds.size[temp];
                }
            }

        }
        return ans;
    }
};